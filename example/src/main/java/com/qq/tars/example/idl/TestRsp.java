// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 2.4.14.
// **********************************************************************

package com.qq.tars.example.idl;

public final class TestRsp extends com.qq.tars.codec.TarsStruct implements Cloneable
{
    public String className()
    {
        return "micang.TestRsp";
    }

    public String fullClassName()
    {
        return "TestRsp";
    }

    public TestData[] data = null;

    public byte [] bytesData = null;

    public java.util.Map<Integer, TestData> mapData = null;

    public String[] stringList = null;

    public java.util.Map<Integer, TestData[]> nestData = null;

    public long id = 0;

    public String name = "";

    public TestData[] getData()
    {
        return data;
    }

    public void  setData(TestData[] data)
    {
        this.data = data;
    }

    public byte [] getBytesData()
    {
        return bytesData;
    }

    public void  setBytesData(byte [] bytesData)
    {
        this.bytesData = bytesData;
    }

    public java.util.Map<Integer, TestData> getMapData()
    {
        return mapData;
    }

    public void  setMapData(java.util.Map<Integer, TestData> mapData)
    {
        this.mapData = mapData;
    }

    public String[] getStringList()
    {
        return stringList;
    }

    public void  setStringList(String[] stringList)
    {
        this.stringList = stringList;
    }

    public java.util.Map<Integer, TestData[]> getNestData()
    {
        return nestData;
    }

    public void  setNestData(java.util.Map<Integer, TestData[]> nestData)
    {
        this.nestData = nestData;
    }

    public long getId()
    {
        return id;
    }

    public void  setId(long id)
    {
        this.id = id;
    }

    public String getName()
    {
        return name;
    }

    public void  setName(String name)
    {
        this.name = name;
    }

    public TestRsp()
    {
    }

    public TestRsp(TestData[] data, byte [] bytesData, java.util.Map<Integer, TestData> mapData, String[] stringList, java.util.Map<Integer, TestData[]> nestData, long id, String name)
    {
        this.data = data;
        this.bytesData = bytesData;
        this.mapData = mapData;
        this.stringList = stringList;
        this.nestData = nestData;
        this.id = id;
        this.name = name;
    }

    public boolean equals(Object o)
    {
        if(o == null)
        {
            return false;
        }

        TestRsp t = (TestRsp) o;
        return (
            com.qq.tars.codec.TarsUtil.equals(data, t.data) && 
            com.qq.tars.codec.TarsUtil.equals(bytesData, t.bytesData) && 
            com.qq.tars.codec.TarsUtil.equals(mapData, t.mapData) && 
            com.qq.tars.codec.TarsUtil.equals(stringList, t.stringList) && 
            com.qq.tars.codec.TarsUtil.equals(nestData, t.nestData) && 
            com.qq.tars.codec.TarsUtil.equals(id, t.id) && 
            com.qq.tars.codec.TarsUtil.equals(name, t.name) );
    }

    public int hashCode()
    {
        try
        {
            throw new Exception("Need define key first!");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return 0;
    }
    public Object clone()
    {
        Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void writeTo(com.qq.tars.codec.TarsOutputStream _os)
    {
        if (null != data)
        {
            _os.write(data, 0);
        }
        if (null != bytesData)
        {
            _os.write(bytesData, 1);
        }
        if (null != mapData)
        {
            _os.write(mapData, 2);
        }
        if (null != stringList)
        {
            _os.write(stringList, 3);
        }
        if (null != nestData)
        {
            _os.write(nestData, 4);
        }
        _os.write(id, 5);
        if (null != name)
        {
            _os.write(name, 6);
        }
    }

    static TestData[] cache_data;
    static {
        cache_data = (TestData[]) new TestData[1];
        TestData __var_75 = new TestData();
        ((TestData[])cache_data)[0] = __var_75;
    }
    static byte [] cache_bytesData;
    static {
        cache_bytesData = (byte[]) new byte[1];
        byte __var_76 = 0;
        ((byte[])cache_bytesData)[0] = __var_76;
    }
    static java.util.Map<Integer, TestData> cache_mapData;
    static {
        cache_mapData = new java.util.HashMap<Integer, TestData>();
        Integer __var_77 = 0;
        TestData __var_78 = new TestData();
        cache_mapData.put(__var_77, __var_78);
    }
    static String[] cache_stringList;
    static {
        cache_stringList = (String[]) new String[1];
        String __var_79 = "";
        ((String[])cache_stringList)[0] = __var_79;
    }
    static java.util.Map<Integer, TestData[]> cache_nestData;
    static {
        cache_nestData = new java.util.HashMap<Integer, TestData[]>();
        Integer __var_80 = 0;
        TestData[] __var_81 = (TestData[]) new TestData[1];
        TestData __var_82 = new TestData();
        ((TestData[])__var_81)[0] = __var_82;
        cache_nestData.put(__var_80, __var_81);
    }

    public void readFrom(com.qq.tars.codec.TarsInputStream _is)
    {
        this.data = (TestData[]) _is.read(cache_data, 0, false);
        this.bytesData = (byte []) _is.read(cache_bytesData, 1, false);
        this.mapData = (java.util.Map<Integer, TestData>) _is.read(cache_mapData, 2, false);
        this.stringList = (String[]) _is.read(cache_stringList, 3, false);
        this.nestData = (java.util.Map<Integer, TestData[]>) _is.read(cache_nestData, 4, false);
        this.id = (long) _is.read(id, 5, false);
        this.name =  _is.readString(6, false);
    }

    public void display(StringBuilder _os, int _level)
    {
        com.qq.tars.codec.TarsDisplayer _ds = new com.qq.tars.codec.TarsDisplayer(_os, _level);
        _ds.display(data, "data");
        _ds.display(bytesData, "bytesData");
        _ds.display(mapData, "mapData");
        _ds.display(stringList, "stringList");
        _ds.display(nestData, "nestData");
        _ds.display(id, "id");
        _ds.display(name, "name");
    }

}

